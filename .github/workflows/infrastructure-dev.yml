# TODO generalize this and use with prod.
# Options:
# 1. Reusable workflow - https://docs.github.com/en/actions/learn-github-actions/reusing-workflows
# 2. Templates - https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates
# 3. Include step - https://github.com/mithro/actions-includes

name: Infrastructure Website Pipeline - DEV
on:
  push:
    branches:
    - main
    paths:
    - 'infrastructure/website/**'
  pull_request:
    branches:
    - main
    paths:
    - 'infrastructure/website/**'

defaults:
  run:
    shell: bash
    working-directory: infrastructure/website

env:
  INFRA_ENV: dev
  AZURE_PIPELINE_CONFIG: ${{ secrets.AZURE_PIPELINE_CONFIG_DEV }} # Value of this GH secret is originally got from Azure KV secret created by bootstrap pipeline
  ONLY_TO_MASK_OUTPUT_TENANT_ID: ${{ secrets.SECRET_TENANT_ID }}
  ONLY_TO_MASK_OUTPUT_SUBSCRIPTION_ID: ${{ secrets.SECRET_SUBSCRIPTION_ID }}

jobs:
  run_infrastructure_pipeline_pulumi_preview:
    name: Preview infrastructure changes
    runs-on: ubuntu-latest
    outputs:
      run_deploy: ${{ steps.preview.outputs.run_deploy }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Get full history in order to get existing tag info etc
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - id: preview
        name: Preview infrastructure changes
        run: |
          set -e

          echo 'Reacting to Github event ${{ github.event_name }}.'
          npm ci --ignore-scripts
          npm run build
          npm run test

          # If we don't set NODE_PATH, we will get errors like
          # Error: Cannot find module '@pulumi/pulumi/cmd/dynamic-provider'
          # +  pulumi:pulumi:Stack website-infrastructure create Require stack:
          # +  pulumi:pulumi:Stack website-infrastructure create - /tmp/automation-8Zl7PN/[eval]
          # This is because Pulumi home path is set to /tmp/<random>
          # And *that* is done because otherwise Pulumi fails (on Node 16 in Docker in GitHub at least) with the error:
          # fatal: error An assertion has failed: could not get workspace path. source error: getting current user: luser: unable to get current user

          PULUMI_OUT_DIR="$(mktemp -d)"
          export WEBSITE_INFRA_CONFIG="$(cat "config/config-${INFRA_ENV}.json")"
          function pulumi()
          {
            docker run \
              --rm \
              --env AZURE_PIPELINE_CONFIG \
              --env WEBSITE_INFRA_CONFIG \
              --env NODE_PATH="$(pwd)/node_modules" \
              --volume "$(pwd)/:$(pwd)/:ro" \
              --volume "${PULUMI_OUT_DIR}/:/pulumi-out/:rw" \
              --entrypoint npm \
              --workdir "$(pwd)" \
              "pulumi/pulumi-nodejs:$(cat package.json | jq -Mrc '.dependencies["@pulumi/pulumi"]')-debian" \
              run pulumi-azure-pipeline "$@"
          }

          pulumi refresh
          pulumi preview

          if [[ '${{ github.event_name }}' == 'push' ]]; then
            PACKAGE_VERSION="$(cat package.json | jq -rM .version)"
            GIT_TAG_NAME="infra-${INFRA_ENV}-v${PACKAGE_VERSION}"
            if [[ -z "$(git ls-remote --tags origin "${GIT_TAG_NAME}")" ]]; then
              # Tag does not exist, we can proceed to deploy phase if there are changes
              echo "Detected that tag ${GIT_TAG_NAME} is not yet created, proceeding to deploy stage"
              # We need to proceed in this case to deploy stage in any case - since we will want to create tags even when there are no Pulumi changes
              echo '::set-output name=run_deploy::true'
              # if [[ "$(cat "${PULUMI_OUT_DIR}/pulumi-out.json" | jq -Mrc '(.summary | keys) == ["same"]')" == 'false' ]]; then
              #   echo "Detected Pulumi changes, will proceed to deploy stage"
              #   echo '::set-output name=run_deploy::true'
              # else
              #   echo "No Pulumi changes detected, so not proceeding to deploy stage"
              # fi
            else
              echo "Infrastructure environment ${INFRA_ENV} is already at version ${PACKAGE_VERSION}, so not proceeding to deploy stage."
            fi
          else
            echo 'Not reacting to push event, so not proceeding to deploy stage'
          fi
      - uses: codecov/codecov-action@v1
        with:
          flags: infrastructure-website
          directory: infrastructure/website

  run_infrastructure_pipeline_pulumi_up:
    name: Perform infrastructure changes
    needs: [ run_infrastructure_pipeline_pulumi_preview ]
    if: ${{ needs.run_infrastructure_pipeline_pulumi_preview.outputs.run_deploy == 'true' }}
    runs-on: ubuntu-latest
    environment: cloud-deploy-env-dev
    timeout-minutes: 180 # SSL-enabled DNS name join to CDN might take a while
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - id: deploy
        name: Perform infrastructure changes
        run: |
          set -e

          npm ci --ignore-scripts
          npm run tsc

          # Disable creation of output file by setting it to empty string
          export WEBSITE_INFRA_CONFIG="$(cat "config/config-${INFRA_ENV}.json")"
          echo '{"pulumiCommandOutputFile":""}' | docker run \
            --rm \
            --interactive \
            --env AZURE_PIPELINE_CONFIG \
            --env WEBSITE_INFRA_CONFIG \
            --env NODE_PATH="$(pwd)/node_modules" \
            --volume "$(pwd)/:$(pwd)/:ro" \
            --entrypoint npm \
            --workdir "$(pwd)" \
            "pulumi/pulumi-nodejs:$(cat package.json | jq -Mrc '.dependencies["@pulumi/pulumi"]')-debian" \
            run pulumi-azure-pipeline -- \
            - up

          # TODO we must generate release notes for the package
          # TODO set up organization-wide CICD-GitHub account
          PACKAGE_VERSION="$(cat package.json | jq -rM .version)"
          GIT_TAG_NAME="infra-${INFRA_ENV}-v${PACKAGE_VERSION}"
          git config --global user.email "cd-automation@codewell-site.project"
          git config --global user.name "CD Automation"
          git tag \
            -a \
            -m "Infrastructure ${INFRA_ENV} release ${PACKAGE_VERSION}" \
            "${GIT_TAG_NAME}"
          git push origin "${GIT_TAG_NAME}"
